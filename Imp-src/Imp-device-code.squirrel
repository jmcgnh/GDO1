// Device
// Last change: 2017-04-19
function pulseDoor(data) {
    local timestamp = time();
    if( timestamp - lastDoorOp < 60) {
        server.log("PULSE DOOR REQUESTED TOO SOON");
        // we just reject the request, no attempt to schedule a followup
        return;
    }
    lastDoorOp = timestamp;
    server.log("PULSE DOOR START");
    server.log("pulseDoor: data=" + data);
    if( data == "1"){
        server.log("push door switch 1");
        door1Switch.write(1);
    } else if (data == "2"){
        door2Switch.write(1);
    }
    imp.wakeup(2, pulseDoorStop);
    // now schedule a getDoorState call for when the movment should be completed
    if( reqRangeOp) imp.cancelwakeup( reqRangeOp);
    reqRangeOpTime = timestamp + 30;
    reqRangeOp = imp.wakeup( 30, getDoorState0 );
    doorComment = " pulsed";
}
function pulseDoorStop() {
    server.log("PULSE DOOR STOP");
    door1Switch.write(0);
    door2Switch.write(0);
}

function getDoorState(data) {
    local timestamp = time();
    local newdelay = 30;
    if( ((timestamp - lastDoorOp) < 30)  || 
        ((timestamp - lastRangeOp) < 5)) {
        server.log("Too soon to get door status");
        if( reqRangeOpTime < (timestamp + 30 )){
            reqRangeOpTime = timestamp + 30;
            if( reqRangeOp) imp.cancelwakeup( reqRangeOp);
            reqRangeOp = imp.wakeup( 30, getDoorState0);
            server.log( "rescheduled");
        }
        return;
    }
    range.read_cm();
}
function getDoorState0() {
    getDoorState(0);
}
function getDoorState1(data) {
    doorComment = " requested";
    getDoorState(data);
}
function doneDoorState() {
    local newDoorState = doorState;
    if( (rangeVal < 0) || (rangeVal >400)) {
        server.log( "Bad range" + rangeVal );
        doorComment = " bad range";
        newDoorState = -1;
    } else {
        newDoorState = ( rangeVal  < 50.0 ? 1 : 0);
    }
    if ( (newDoorState != doorState) || doorComment != "") { // send only if changed or requested
        server.log("Door state: " + reportDoorState(newDoorState, rangeVal));
        doorState = newDoorState;
        agent.send("doorState", reportDoorState(newDoorState, rangeVal));
        doorComment = "";
    } else {
        server.log("Door state: (unchanged) " + reportDoorState( doorState, rangeVal));
    
    }
    reqRangeOpTime = time() + 45;
    if( reqRangeOp ) imp.cancelwakeup( reqRangeOp);
    reqRangeOp = imp.wakeup( 45, getDoorState0); // schedule another check
    return newDoorState;
}
function doorStateAsString(state) {
    if (state == 1) {
        return "open";
    } else if ( state == 0) {
        return "closed";
    }
    return "unknown";
}
function reportDoorState( state, distance) {
    return doorStateAsString(state) + " " + distance + doorComment;
}
class Ultrasonic {
    // consts
    static TO = 30; // timeout in ms
    
    // pins
    _trig   = null;
    _echo  = null;

    // aliased methods
    _tw     = null;
    _er     = null;
    _hu     = null;
    _hm     = null;
    _tocb   = null; // timeout callback

    // vars
    _st     = null; // trigger start time in ms
    _es     = null; // echo start time
    _ee     = null; // echo end time
    _ew     = null; // echo width in us
    _t0     = null; // time zero - DEBUG
    _t1     = null; // trigger start time - DEBUG
    _t2     = null; // trigger end time - DEBUG
    _int1   = null; // interval measurement 1 - DEBUG
    _int2   = null; // interval measurement 2 - DEBUG
    _tocbw  = null; // callback pointer from timeout wakeup
    _tout   = null; // timeout flag
    _pws_seen = 0; // callback check - DEBUG

    function _wd_to() {
        server.log( "timeout reported");
        _tout = 1;
        _es = -1;
        _ee = -1;
        _echo.configure(DIGITAL_IN);
        _finalize();
    }
    function _pws() { // pulse width start
        _pws_seen ++;
        if( _pws_seen == 1) {
            _es = _hu();
        } else if( _pws_seen == 2) {
            _ee = _hu();
            _echo.configure(DIGITAL_IN);
            imp.cancelwakeup(_tocbw); 
            _finalize();
        }
    }

    constructor(trig, echo) {
        _trig = trig;
        _echo = echo;

        _hu   = hardware.micros.bindenv(hardware);
        _hm   = hardware.millis.bindenv(hardware);
        _tw   = _trig.write.bindenv(_trig);
        _er   = _echo.read.bindenv(_echo);
        _tocb = _wd_to.bindenv(this);
    }

    function read_cm() {
        _st = _hm(); // start time for timeout
        _tout = 0; // timeout flag
        _tocbw = imp.wakeup( (TO*0.001), _tocb); // schedule watchdog
        _echo.configure( DIGITAL_IN, _pws.bindenv(this));
        _t0 = _hu(); // timer timing - DEBUG
        _t1 = _hu(); // start time for trigger - DEBUG
        // Quickly pulse the trig pin
        _tw(0); _tw(1); _tw(0);
        _t2 = _hu(); // end time for trigger - DEBUG
        // Wait for the rising edge on echo
    }
    function _finalize() {
        server.log("timeout flag " + _tout + "  pws seen " + _pws_seen);
        _pws_seen = 0;
        server.log("echo start " + _es);
        server.log("echo end " + _ee);
        _ew = _ee - _es;
        server.log("echo width " + _ew + " microsec");
        _int1 = _t1 - _t0; // timer duration - DEBUG
        _int2 = _t2 - _t1; // trigger duration - DEBUG
        server.log("timer duration " + _int1 + " trigger duration " + _int2 + " microsec")
        if ((_hm() - _st) >= TO) {
            rangeVal = -1;
        } else {
            rangeVal =(_ee - _es)/58.0; // centimeters
        }
    doneDoorState();
    }
}

trig <- hardware.pin1;
echo <- hardware.pin2;
echo2 <- hardware.pin5
door1Switch <- hardware.pin7;
door2Switch <- hardware.pin8;
lastDoorOp <- (time() - 60);
lastRangeOp <- (time() - 60);
range <- Ultrasonic(trig, echo);
rangeVal <- -1;
doorState <- -1; // unknown
doorComment <- " startup";
reqRangeOp <- null;
reqRangeOpTime <- -1;

trig.configure(DIGITAL_OUT,0);
echo.configure(DIGITAL_IN);
echo2.configure(DIGITAL_IN);
door1Switch.configure(DIGITAL_OUT, 0);
door2Switch.configure(DIGITAL_OUT, 0);
agent.on("pulseDoor", pulseDoor);
agent.on("getDoorState", getDoorState1);

getDoorState(0);

server.log("Imp online @ " + imp.getssid() + "!");
