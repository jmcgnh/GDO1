//Agent
// Log the URLs we need
server.log("Operate garage door: " + http.agenturl() + "?command=n");
server.log("commands include: pulsedoor, opendoor, closedoor, getstatus, showstatus");
server.log("currently value 'n' is ignored, but could indicate which door to operate");

garageDoorState <- "closed"; // assumption
local whichdoor = 1;

function requestHandler(request, response) {
  try {
    response.header("Access-Control-Allow-Origin", "*");
    server.log( "request looks like: " + http.jsonencode( request));
    server.log( "request.query looks like: " + http.jsonencode( request.query));
    
    if (!device.isconnected()) {
            server.log("pulseDoor: Imp offline");
            throw "imp offline";
            }
    if ("pulsedoor" in request.query) {
            device.send("pulseDoor", whichdoor);
        }
    if ("closedoor" in request.query) {
            device.send("closeDoor", whichdoor);
        }
    if ("opendoor" in request.query) {
            device.send("openDoor", whichdoor);
        }
    if ("getstatus" in request.query) {
            device.send("getDoorState", whichdoor);
        }
    if ("showstatus" in request.query) {
            response.send(200, garageDoorState);
            return;
        }
    // normal response
    response.send(200, "OK");
  } catch (ex) {
    response.send(400, "Error: " + ex);
  }
}

// register the HTTP handler
http.onrequest(requestHandler);

// Set up the logging server address we will send to
const PUBLIC_TOKEN = "ExampleExampleExample"; 
const LOGGING_URL_BASE = "https://mydomain.com/input/";
const PRIVATE_TOKEN = "ExampleExampleExample";

function logdata(logMessage) {    
    // Prepare the request with a JSON payload
    local body = logMessage;
    local extraHeaders = {"Phant-Private-Key" : PRIVATE_TOKEN };
    
    local request = http.post(LOGGING_URL_BASE + PUBLIC_TOKEN, extraHeaders, logMessage);

    // Send the message
    local incomingDataTable = request.sendsync();
 
    // Display the received data
    server.log("Code: " + incomingDataTable.statuscode + ". Message: " + incomingDataTable.body);
}

function saveDoorState(state) {
    garageDoorState <- state;
    logdata( "status1=" + state + "&status2=" + "unknown");
}

device.on("doorState", saveDoorState);
