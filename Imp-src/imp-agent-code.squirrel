// GDO1 Agent
// Last change: 2017-12-25

// Log the URLs we need
server.log("Operate garage door: " + http.agenturl() + "?command=n");
server.log("commands include: pulsedoor, opendoor, closedoor, getstatus, showstatus, debugflag");
server.log("currently value 'n' is ignored, but could indicate which door to operate");

// Always nice to see these in the log
server.log("agent version " + imp.getsoftwareversion());

garageDoor1State <- "unknown";
garageDoor2State <- "unknown";

phantSettings <- {};
// Load the settings table in from permanent storage
local settings = server.load();

// If no preferences have been saved, settings will be empty
if (settings.len() != 0) {
    // Settings table is NOT empty so set the clockPrefs to the loaded table
    phantSettings = settings;
    server.log( "settings looks like: " + http.jsonencode( settings));

} else {
    // look for a file named imp-agent-initialization-example.squirrel on GitHub
    // for how to set this up. The goal is to avoid publishing secrets in the repo.
    server.log("settings came back empty")
}

function requestHandler(request, response) {
  try {
    response.header("Access-Control-Allow-Origin", "*");
    server.log( "request looks like: " + http.jsonencode( request));
    server.log( "request.query looks like: " + http.jsonencode( request.query));
    
    if (!device.isconnected()) {
            server.log("pulseDoor: Imp offline");
            throw "imp offline";
            }
    if ("pulsedoor" in request.query) {
            device.send("pulseDoor", request.query.pulsedoor);
            logdata( "status1=" + "pulsed" + "&status2=" + "")
        }
    if ("closedoor" in request.query) {
            device.send("closeDoor", request.query.closedoor);
        }
    if ("opendoor" in request.query) {
            device.send("openDoor", request.query.opendoor);
        }
    if ("getstatus" in request.query) {
            device.send("getDoorState", request.query.getstatus);
        }
    if ("showstatus" in request.query) {
            response.send(200, "1: " + garageDoor1State + "  2: " + garageDoor2State);
            return;
        }
    if ("debugflag" in request.query) {
            device.send("setdebugflag", request.query.debugflag);
        }
    // normal response
    response.send(200, "OK");
  } catch (ex) {
    response.send(400, "Error: " + ex);
  }
}

// register the HTTP handler
http.onrequest(requestHandler);

// Send data to logging server (currently Phant)
function logdata(logMessage) {    
    // Prepare the request with a JSON payload
    local body = logMessage;
    // These phantSettings are obtained with server.load()
    // Not trying to be needlessly obscure, but you need to see example code for how this should be
    // initialized for your settings (trying to keep credentials out of GitHub repos)
    local extraHeaders = {"Phant-Private-Key" : phantSettings.privateToken };
    local request = http.post(phantSettings.URLbase + phantSettings.publicToken, extraHeaders, logMessage);

    // Send the message
    local incomingDataTable = request.sendsync();
 
    // Display the received data
    server.log("Code: " + incomingDataTable.statuscode + ". Message: " + incomingDataTable.body);
}

// helper functions
function logit() {
    logdata( "status1=" + garageDoor1State + "&status2=" + garageDoor2State);
}

function saveDoor1State(state) {
    garageDoor1State <- state;
    logit();
}

function saveDoor2State(state) {
    garageDoor2State <- state;
    logit();
}

function setdebugflagoff() {
    device.send( "setdebugflag", 0);
}

// register handlers for responses coming back from device
device.on("doorState", saveDoor1State);
device.on("door1State", saveDoor1State);
device.on("door2State", saveDoor2State);

// I initially set the debugflag to 1, but generally I don't want that to
// continue for very long as it generates a lot of extra agent traffic.
// This automatically turns off debugging after 3 minutes.
imp.wakeup( 180, setdebugflagoff);
